--[[
    SynthwaveUI Library
    A modern, customizable UI library with synthwave aesthetics for Roblox executors
    Version: 1.0.0
]]

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local TextService = game:GetService("TextService")
local CoreGui = game:GetService("CoreGui")
local GuiService = game:GetService("GuiService")

-- Variables
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local SynthwaveUI = {}
local DraggingUI = false
local SelectedTab = nil
local TabButtons = {}
local UIElements = {}
local ActiveToasts = {}
local ToastQueue = {}
local ColorScheme = {
    Background = Color3.fromRGB(16, 8, 32),
    Accent1 = Color3.fromRGB(155, 89, 182),
    Accent2 = Color3.fromRGB(52, 152, 219),
    Text = Color3.fromRGB(255, 255, 255),
    Secondary = Color3.fromRGB(26, 31, 44),
    Success = Color3.fromRGB(46, 204, 113),
    Error = Color3.fromRGB(231, 76, 60),
    Warning = Color3.fromRGB(241, 196, 15)
}

-- Constants
local TWEEN_SPEED = 0.25
local TOAST_DURATION = 3
local TOAST_STAGGER = 0.15
local MAX_TOASTS = 5
local DRAG_SPEED = 0.1
local CORNER_RADIUS = UDim.new(0, 6)
local BLUR_SIZE = 15
local FONT = Enum.Font.GothamBold
local REGULAR_FONT = Enum.Font.Gotham

-- Utility Functions
local function Create(instanceType)
    return function(properties)
        local instance = Instance.new(instanceType)
        for property, value in next, properties do
            if property ~= "Parent" then
                instance[property] = value
            end
        end
        if properties.Parent then
            instance.Parent = properties.Parent
        end
        return instance
    end
end

local function Tween(instance, properties, duration, style, direction)
    local tween = TweenService:Create(
        instance,
        TweenInfo.new(duration or TWEEN_SPEED, style or Enum.EasingStyle.Quart, direction or Enum.EasingDirection.Out),
        properties
    )
    tween:Play()
    return tween
end

local function RoundNumber(number, decimalPlaces)
    decimalPlaces = decimalPlaces or 0
    local multiplier = 10 ^ decimalPlaces
    return math.floor(number * multiplier + 0.5) / multiplier
end

local function CreateRipple(parent)
    local ripple = Create("Frame")({
        Name = "Ripple",
        Parent = parent,
        BackgroundColor3 = ColorScheme.Text,
        BackgroundTransparency = 0.8,
        BorderSizePixel = 0,
        AnchorPoint = Vector2.new(0.5, 0.5),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(0, 0, 0, 0)
    })
    
    local corner = Create("UICorner")({
        CornerRadius = UDim.new(1, 0),
        Parent = ripple
    })
    
    local size = math.max(parent.AbsoluteSize.X, parent.AbsoluteSize.Y) * 2
    local mousePos = UserInputService:GetMouseLocation() - parent.AbsolutePosition
    ripple.Position = UDim2.new(0, mousePos.X, 0, mousePos.Y)
    
    Tween(ripple, {Size = UDim2.new(0, size, 0, size), BackgroundTransparency = 1}, 0.5)
    
    task.delay(0.5, function()
        ripple:Destroy()
    end)
end

-- Main UI Creation
function SynthwaveUI:Create(title, accentColor)
    if accentColor then
        ColorScheme.Accent1 = accentColor
    end
    
    -- Check if UI already exists
    if CoreGui:FindFirstChild("SynthwaveUI") then
        CoreGui:FindFirstChild("SynthwaveUI"):Destroy()
    end
    
    -- Create main UI
    local UI = Create("ScreenGui")({
        Name = "SynthwaveUI",
        Parent = CoreGui,
        IgnoreGuiInset = true,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        ResetOnSpawn = false
    })
    
    -- Create blur effect
    local blur = Create("BlurEffect")({
        Name = "SynthwaveBlur",
        Parent = game:GetService("Lighting"),
        Size = 0
    })
    
    Tween(blur, {Size = BLUR_SIZE}, 0.5)
    
    -- Main frame
    local mainFrame = Create("Frame")({
        Name = "MainFrame",
        Parent = UI,
        BackgroundColor3 = ColorScheme.Background,
        BorderSizePixel = 0,
        Position = UDim2.new(0.5, -400, 0.5, -250),
        Size = UDim2.new(0, 800, 0, 500),
        ClipsDescendants = true,
        AnchorPoint = Vector2.new(0.5, 0.5)
    })
    
    local mainCorner = Create("UICorner")({
        CornerRadius = CORNER_RADIUS,
        Parent = mainFrame
    })
    
    local mainStroke = Create("UIStroke")({
        Parent = mainFrame,
        Color = ColorScheme.Accent1,
        Thickness = 2,
        ApplyStrokeMode = Enum.ApplyStrokeMode.Border,
        Transparency = 0.2
    })
    
    -- Grid background
    local gridBg = Create("Frame")({
        Name = "GridBackground",
        Parent = mainFrame,
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 1, 0),
        ZIndex = 0
    })
    
    local gridImage = Create("ImageLabel")({
        Name = "GridPattern",
        Parent = gridBg,
        BackgroundTransparency = 1,
        Image = "rbxassetid://6764432408", -- Grid pattern image
        ImageTransparency = 0.95,
        ScaleType = Enum.ScaleType.Tile,
        TileSize = UDim2.new(0, 50, 0, 50),
        Size = UDim2.new(1, 0, 1, 0),
        ZIndex = 0
    })
    
    -- Top bar
    local topBar = Create("Frame")({
        Name = "TopBar",
        Parent = mainFrame,
        BackgroundColor3 = ColorScheme.Secondary,
        BorderSizePixel = 0,
        Size = UDim2.new(1, 0, 0, 35),
    })
    
    local topCorner = Create("UICorner")({
        CornerRadius = CORNER_RADIUS,
        Parent = topBar
    })
    
    local bottomBarCover = Create("Frame")({
        Name = "BottomBarCover",
        Parent = topBar,
        BackgroundColor3 = ColorScheme.Secondary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, -10),
        Size = UDim2.new(1, 0, 0, 10)
    })
    
    -- Title
    local titleLabel = Create("TextLabel")({
        Name = "Title",
        Parent = topBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 15, 0, 0),
        Size = UDim2.new(0.5, 0, 1, 0),
        Font = FONT,
        Text = title or "SynthwaveUI",
        TextColor3 = ColorScheme.Text,
        TextSize = 18,
        TextXAlignment = Enum.TextXAlignment.Left
    })
    
    -- Buttons (Close, Minimize)
    local buttonsHolder = Create("Frame")({
        Name = "Buttons",
        Parent = topBar,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -80, 0, 0),
        Size = UDim2.new(0, 80, 1, 0)
    })
    
    local minimizeBtn = Create("TextButton")({
        Name = "MinimizeBtn",
        Parent = buttonsHolder,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(0, 40, 1, 0),
        Font = FONT,
        Text = "−",
        TextColor3 = ColorScheme.Text,
        TextSize = 20
    })
    
    local closeBtn = Create("TextButton")({
        Name = "CloseBtn",
        Parent = buttonsHolder,
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -40, 0, 0),
        Size = UDim2.new(0, 40, 1, 0),
        Font = FONT,
        Text = "×",
        TextColor3 = ColorScheme.Text,
        TextSize = 20
    })
    
    -- Sidebar
    local sidebar = Create("Frame")({
        Name = "Sidebar",
        Parent = mainFrame,
        BackgroundColor3 = ColorScheme.Secondary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 35),
        Size = UDim2.new(0, 150, 1, -35)
    })
    
    local sidebarCorner = Create("UICorner")({
        CornerRadius = CORNER_RADIUS,
        Parent = sidebar
    })
    
    local rightCover = Create("Frame")({
        Name = "RightCover",
        Parent = sidebar,
        BackgroundColor3 = ColorScheme.Secondary,
        BorderSizePixel = 0,
        Position = UDim2.new(1, -10, 0, 0),
        Size = UDim2.new(0, 10, 1, 0)
    })
    
    -- Player info section
    local playerSection = Create("Frame")({
        Name = "PlayerSection",
        Parent = sidebar,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 100),
        ClipsDescendants = true
    })
    
    local avatarHolder = Create("Frame")({
        Name = "AvatarHolder",
        Parent = playerSection,
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 0, 0, 10),
        Size = UDim2.new(0, 60, 0, 60),
        AnchorPoint = Vector2.new(0.5, 0)
    })
    
    local avatarImage = Create("ImageLabel")({
        Name = "Avatar",
        Parent = avatarHolder,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Image = Players:GetUserThumbnailAsync(LocalPlayer.UserId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size420),
        ScaleType = Enum.ScaleType.Fit
    })
    
    local avatarCorner = Create("UICorner")({
        CornerRadius = UDim.new(1, 0),
        Parent = avatarImage
    })
    
    local avatarStroke = Create("UIStroke")({
        Parent = avatarImage,
        Color = ColorScheme.Accent1,
        Thickness = 2,
        ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    })
    
    local usernameLabel = Create("TextLabel")({
        Name = "Username",
        Parent = playerSection,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 75),
        Size = UDim2.new(1, 0, 0, 20),
        Font = FONT,
        Text = LocalPlayer.DisplayName,
        TextColor3 = ColorScheme.Text,
        TextSize = 14
    })
    
    -- Tab buttons container
    local tabsContainer = Create("ScrollingFrame")({
        Name = "TabsContainer",
        Parent = sidebar,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 100),
        Size = UDim2.new(1, 0, 1, -100),
        CanvasSize = UDim2.new(0, 0, 0, 0),
        ScrollBarThickness = 2,
        ScrollBarImageColor3 = ColorScheme.Accent1,
        BorderSizePixel = 0
    })
    
    local tabsLayout = Create("UIListLayout")({
        Parent = tabsContainer,
        Padding = UDim.new(0, 5),
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder
    })
    
    -- Content area
    local contentContainer = Create("Frame")({
        Name = "ContentContainer",
        Parent = mainFrame,
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 150, 0, 35),
        Size = UDim2.new(1, -150, 1, -35),
        ClipsDescendants = true
    })
    
    -- Bottom bar with game info
    local bottomBar = Create("Frame")({
        Name = "BottomBar",
        Parent = mainFrame,
        BackgroundColor3 = ColorScheme.Secondary,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 1, -20),
        Size = UDim2.new(1, 0, 0, 20)
    })
    
    local bottomGameInfo = Create("TextLabel")({
        Name = "GameInfo",
        Parent = bottomBar,
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 1, 0),
        Font = REGULAR_FONT,
        TextColor3 = ColorScheme.Text,
        TextSize = 12,
        Text = "Game: " .. (game.Name or "Unknown") .. " | Place ID: " .. (game.PlaceId or "Unknown"),
        TextXAlignment = Enum.TextXAlignment.Center
    })
    
    -- Dragging functionality
    local dragging = false
    local dragInput
    local dragStart
    local startPos
    
    local function UpdateDrag(input)
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    topBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    topBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            UpdateDrag(input)
        end
    end)
    
    -- Button functionality
    closeBtn.MouseButton1Click:Connect(function()
        CreateRipple(closeBtn)
        Tween(blur, {Size = 0}, 0.5)
        Tween(mainFrame, {Position = UDim2.new(0.5, -400, 1.5, 0)}, 0.5, Enum.EasingStyle.Back, Enum.EasingDirection.In)
        task.wait(0.5)
        UI:Destroy()
        blur:Destroy()
    end)
    
    local minimized = false
    minimizeBtn.MouseButton1Click:Connect(function()
        CreateRipple(minimizeBtn)
        minimized = not minimized
        if minimized then
            Tween(mainFrame, {Size = UDim2.new(0, 800, 0, 35)})
        else
            Tween(mainFrame, {Size = UDim2.new(0, 800, 0, 500)})
        end
    end)
    
    -- UI Object
    local UIObject = {
        UI = UI,
        MainFrame = mainFrame,
        Tabs = {},
        CurrentTab = nil,
        Elements = {},
        Settings = {
            Theme = "Default",
            AccentColor = ColorScheme.Accent1
        }
    }
    
    -- Create a tab
    function UIObject:AddTab(name, icon)
        local tabButton = Create("TextButton")({
            Name = name .. "Tab",
            Parent = tabsContainer,
            BackgroundColor3 = ColorScheme.Background,
            BorderSizePixel = 0,
            Size = UDim2.new(0.9, 0, 0, 35),
            Font = FONT,
            Text = name,
            TextColor3 = ColorScheme.Text,
            TextSize = 14,
            ClipsDescendants = true,
            AutoButtonColor = false
        })
        
        local tabCorner = Create("UICorner")({
            CornerRadius = CORNER_RADIUS,
            Parent = tabButton
        })
        
        local iconImage
        if icon then
            local iconElement = Create("ImageLabel")({
                Name = "Icon",
                Parent = tabButton,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0.5, 0),
                Size = UDim2.new(0, 20, 0, 20),
                Image = icon,
                AnchorPoint = Vector2.new(0, 0.5)
            })
            
            tabButton.Text = "    " .. name
            tabButton.TextXAlignment = Enum.TextXAlignment.Left
            iconImage = iconElement
        end
        
        local tabContainer = Create("ScrollingFrame")({
            Name = name .. "Container",
            Parent = contentContainer,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            CanvasSize = UDim2.new(0, 0, 0, 0),
            ScrollBarThickness = 3,
            ScrollBarImageColor3 = ColorScheme.Accent1,
            BorderSizePixel = 0,
            Visible = false,
            AutomaticCanvasSize = Enum.AutomaticSize.Y
        })
        
        local elementLayout = Create("UIListLayout")({
            Parent = tabContainer,
            Padding = UDim.new(0, 10),
            HorizontalAlignment = Enum.HorizontalAlignment.Center,
            SortOrder = Enum.SortOrder.LayoutOrder
        })
        
        local elemPadding = Create("UIPadding")({
            Parent = tabContainer,
            PaddingTop = UDim.new(0, 10),
            PaddingBottom = UDim.new(0, 10),
            PaddingLeft = UDim.new(0, 10),
            PaddingRight = UDim.new(0, 10)
        })
        
        table.insert(TabButtons, {Button = tabButton, Container = tabContainer})
        
        tabButton.MouseButton1Click:Connect(function()
            CreateRipple(tabButton)
            for _, tab in ipairs(TabButtons) do
                Tween(tab.Button, {BackgroundColor3 = ColorScheme.Background})
                tab.Container.Visible = false
            end
            
            Tween(tabButton, {BackgroundColor3 = ColorScheme.Accent1})
            tabContainer.Visible = true
            UIObject.CurrentTab = name
        end)
        
        tabButton.MouseEnter:Connect(function()
            if UIObject.CurrentTab ~= name then
                Tween(tabButton, {BackgroundColor3 = Color3.fromRGB(26, 31, 54)})
            end
        end)
        
        tabButton.MouseLeave:Connect(function()
            if UIObject.CurrentTab ~= name then
                Tween(tabButton, {BackgroundColor3 = ColorScheme.Background})
            end
        end)
        
        local tab = {
            Container = tabContainer,
            Name = name,
            Button = tabButton,
            Elements = {}
        }
        
        UIObject.Tabs[name] = tab
        
        if not UIObject.CurrentTab then
            UIObject.CurrentTab = name
            Tween(tabButton, {BackgroundColor3 = ColorScheme.Accent1})
            tabContainer.Visible = true
        end
        
        -- Create sections in tab
        function tab:AddSection(sectionName)
            local sectionFrame = Create("Frame")({
                Name = sectionName .. "Section",
                Parent = tabContainer,
                BackgroundColor3 = ColorScheme.Secondary,
                BorderSizePixel = 0,
                Size = UDim2.new(1, -20, 0, 40), -- Initial size
                AutomaticSize = Enum.AutomaticSize.Y
            })
            
            local sectionCorner = Create("UICorner")({
                CornerRadius = CORNER_RADIUS,
                Parent = sectionFrame
            })
            
            local sectionStroke = Create("UIStroke")({
                Parent = sectionFrame,
                Color = ColorScheme.Accent1,
                Thickness = 1,
                Transparency = 0.7
            })
            
            local sectionTitle = Create("TextLabel")({
                Name = "Title",
                Parent = sectionFrame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 0),
                Size = UDim2.new(1, -20, 0, 30),
                Font = FONT,
                Text = sectionName,
                TextColor3 = ColorScheme.Text,
                TextSize = 16,
                TextXAlignment = Enum.TextXAlignment.Left
            })
            
            local sectionContainer = Create("Frame")({
                Name = "Container",
                Parent = sectionFrame,
                BackgroundTransparency = 1,
                Position = UDim2.new(0, 10, 0, 30),
                Size = UDim2.new(1, -20, 0, 0),
                AutomaticSize = Enum.AutomaticSize.Y
            })
            
            local containerLayout = Create("UIListLayout")({
                Parent = sectionContainer,
                Padding = UDim.new(0, 8),
                HorizontalAlignment = Enum.HorizontalAlignment.Center,
                SortOrder = Enum.SortOrder.LayoutOrder
            })
            
            local section = {
                Frame = sectionFrame,
                Container = sectionContainer,
                Name = sectionName
            }
            
            tab.Elements[sectionName] = section
            
            -- Create a button
            function section:AddButton(btnText, callback)
                local button = Create("TextButton")({
                    Name = btnText .. "Button",
                    Parent = sectionContainer,
                    BackgroundColor3 = ColorScheme.Background,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 0, 35),
                    Font = FONT,
                    Text = btnText,
                    TextColor3 = ColorScheme.Text,
                    TextSize = 14,
                    ClipsDescendants = true,
                    AutoButtonColor = false
                })
                
                local buttonCorner = Create("UICorner")({
                    CornerRadius = CORNER_RADIUS,
                    Parent = button
                })
                
                button.MouseButton1Click:Connect(function()
                    CreateRipple(button)
                    if typeof(callback) == "function" then
                        task.spawn(function()
                            callback()
                        end)
                    end
                end)
                
                button.MouseEnter:Connect(function()
                    Tween(button, {BackgroundColor3 = ColorScheme.Accent1})
                end)
                
                button.MouseLeave:Connect(function()
                    Tween(button, {BackgroundColor3 = ColorScheme.Background})
                end)
                
                return button
            end
            
            -- Create a toggle
            function section:AddToggle(toggleText, default, callback)
                local toggled = default or false
                
                local toggleFrame = Create("Frame")({
                    Name = toggleText .. "Toggle",
                    Parent = sectionContainer,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 35)
                })
                
                local toggleButton = Create("TextButton")({
                    Name = "Button",
                    Parent = toggleFrame,
                    BackgroundColor3 = toggled and ColorScheme.Accent1 or ColorScheme.Background,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 5, 0.5, 0),
                    Size = UDim2.new(0, 44, 0, 24),
                    Text = "",
                    AnchorPoint = Vector2.new(0, 0.5),
                    AutoButtonColor = false
                })
                
                local toggleCorner = Create("UICorner")({
                    CornerRadius = UDim.new(1, 0),
                    Parent = toggleButton
                })
                
                local toggleCircle = Create("Frame")({
                    Name = "Circle",
                    Parent = toggleButton,
                    BackgroundColor3 = ColorScheme.Text,
                    Position = toggled and UDim2.new(1, -20, 0.5, 0) or UDim2.new(0, 4, 0.5, 0),
                    Size = UDim2.new(0, 16, 0, 16),
                    AnchorPoint = Vector2.new(0, 0.5)
                })
                
                local circleCorner = Create("UICorner")({
                    CornerRadius = UDim.new(1, 0),
                    Parent = toggleCircle
                })
                
                local toggleLabel = Create("TextLabel")({
                    Name = "Label",
                    Parent = toggleFrame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 60, 0, 0),
                    Size = UDim2.new(1, -65, 1, 0),
                    Font = REGULAR_FONT,
                    Text = toggleText,
                    TextColor3 = ColorScheme.Text,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                toggleButton.MouseButton1Click:Connect(function()
                    toggled = not toggled
                    
                    Tween(toggleButton, {BackgroundColor3 = toggled and ColorScheme.Accent1 or ColorScheme.Background})
                    Tween(toggleCircle, {Position = toggled and UDim2.new(1, -20, 0.5, 0) or UDim2.new(0, 4, 0.5, 0)})
                    
                    if typeof(callback) == "function" then
                        task.spawn(function()
                            callback(toggled)
                        end)
                    end
                end)
                
                local toggleObj = {
                    Frame = toggleFrame,
                    Toggled = toggled,
                    Set = function(self, value)
                        toggled = value
                        Tween(toggleButton, {BackgroundColor3 = toggled and ColorScheme.Accent1 or ColorScheme.Background})
                        Tween(toggleCircle, {Position = toggled and UDim2.new(1, -20, 0.5, 0) or UDim2.new(0, 4, 0.5, 0)})
                        
                        if typeof(callback) == "function" then
                            task.spawn(function()
                                callback(toggled)
                            end)
                        end
                    end
                }
                
                return toggleObj
            end
            
            -- Create a slider
            function section:AddSlider(sliderText, min, max, default, precision, callback)
                min = min or 0
                max = max or 100
                default = default or min
                precision = precision or 0
                
                local sliderFrame = Create("Frame")({
                    Name = sliderText .. "Slider",
                    Parent = sectionContainer,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 50)
                })
                
                local sliderLabel = Create("TextLabel")({
                    Name = "Label",
                    Parent = sliderFrame,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 20),
                    Font = REGULAR_FONT,
                    Text = sliderText,
                    TextColor3 = ColorScheme.Text,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                local valueLabel = Create("TextLabel")({
                    Name = "Value",
                    Parent = sliderFrame,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, -40, 0, 0),
                    Size = UDim2.new(0, 40, 0, 20),
                    Font = REGULAR_FONT,
                    Text = tostring(default),
                    TextColor3 = ColorScheme.Text,
                    TextSize = 14
                })
                
                local sliderBg = Create("Frame")({
                    Name = "Background",
                    Parent = sliderFrame,
                    BackgroundColor3 = ColorScheme.Background,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 0, 25),
                    Size = UDim2.new(1, 0, 0, 10)
                })
                
                local bgCorner = Create("UICorner")({
                    CornerRadius = UDim.new(1, 0),
                    Parent = sliderBg
                })
                
                local sliderFill = Create("Frame")({
                    Name = "Fill",
                    Parent = sliderBg,
                    BackgroundColor3 = ColorScheme.Accent1,
                    BorderSizePixel = 0,
                    Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
                })
                
                local fillCorner = Create("UICorner")({
                    CornerRadius = UDim.new(1, 0),
                    Parent = sliderFill
                })
                
                local sliderThumb = Create("Frame")({
                    Name = "Thumb",
                    Parent = sliderBg,
                    BackgroundColor3 = ColorScheme.Text,
                    BorderSizePixel = 0,
                    Position = UDim2.new((default - min) / (max - min), 0, 0.5, 0),
                    Size = UDim2.new(0, 16, 0, 16),
                    AnchorPoint = Vector2.new(0.5, 0.5),
                    ZIndex = 2
                })
                
                local thumbCorner = Create("UICorner")({
                    CornerRadius = UDim.new(1, 0),
                    Parent = sliderThumb
                })
                
                local currentValue = default
                
                local function UpdateSlider(input)
                    local sizeX = math.clamp((input.Position.X - sliderBg.AbsolutePosition.X) / sliderBg.AbsoluteSize.X, 0, 1)
                    Tween(sliderFill, {Size = UDim2.new(sizeX, 0, 1, 0)}, 0.1)
                    Tween(sliderThumb, {Position = UDim2.new(sizeX, 0, 0.5, 0)}, 0.1)
                    
                    local calculatedValue = min + (max - min) * sizeX
                    currentValue = RoundNumber(calculatedValue, precision)
                    valueLabel.Text = tostring(currentValue)
                    
                    if typeof(callback) == "function" then
                        task.spawn(function()
                            callback(currentValue)
                        end)
                    end
                end
                
                local dragging = false
                
                sliderBg.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        dragging = true
                        UpdateSlider(input)
                    end
                end)
                
                sliderBg.InputEnded:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        dragging = false
                    end
                end)
                
                UserInputService.InputChanged:Connect(function(input)
                    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                        UpdateSlider(input)
                    end
                end)
                
                local sliderObj = {
                    Frame = sliderFrame,
                    Value = currentValue,
                    Set = function(self, value)
                        currentValue = math.clamp(value, min, max)
                        local sizeX = (currentValue - min) / (max - min)
                        Tween(sliderFill, {Size = UDim2.new(sizeX, 0, 1, 0)}, 0.1)
                        Tween(sliderThumb, {Position = UDim2.new(sizeX, 0, 0.5, 0)}, 0.1)
                        valueLabel.Text = tostring(currentValue)
                        
                        if typeof(callback) == "function" then
                            task.spawn(function()
                                callback(currentValue)
                            end)
                        end
                    end
                }
                
                return sliderObj
            end
            
            -- Create a dropdown
            function section:AddDropdown(dropText, options, default, callback)
                local dropFrame = Create("Frame")({
                    Name = dropText .. "Dropdown",
                    Parent = sectionContainer,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 55), -- Initial size
                    ClipsDescendants = true
                })
                
                local dropLabel = Create("TextLabel")({
                    Name = "Label",
                    Parent = dropFrame,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 20),
                    Font = REGULAR_FONT,
                    Text = dropText,
                    TextColor3 = ColorScheme.Text,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                local selectedOption = default or (options and options[1]) or ""
                
                local dropButton = Create("TextButton")({
                    Name = "Button",
                    Parent = dropFrame,
                    BackgroundColor3 = ColorScheme.Background,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 0, 25),
                    Size = UDim2.new(1, 0, 0, 30),
                    Font = REGULAR_FONT,
                    Text = selectedOption,
                    TextColor3 = ColorScheme.Text,
                    TextSize = 14,
                    AutoButtonColor = false
                })
                
                local buttonCorner = Create("UICorner")({
                    CornerRadius = CORNER_RADIUS,
                    Parent = dropButton
                })
                
                local dropIcon = Create("ImageLabel")({
                    Name = "Icon",
                    Parent = dropButton,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(1, -25, 0.5, 0),
                    Size = UDim2.new(0, 15, 0, 15),
                    AnchorPoint = Vector2.new(0.5, 0.5),
                    Image = "rbxassetid://6031091004", -- Dropdown arrow
                    ImageColor3 = ColorScheme.Text,
                    Rotation = 0
                })
                
                local optionsFrame = Create("Frame")({
                    Name = "Options",
                    Parent = dropFrame,
                    BackgroundColor3 = ColorScheme.Background,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 0, 60),
                    Size = UDim2.new(1, 0, 0, 0),
                    Visible = false,
                    ZIndex = 5
                })
                
                local optionsCorner = Create("UICorner")({
                    CornerRadius = CORNER_RADIUS,
                    Parent = optionsFrame
                })
                
                local optionsList = Create("ScrollingFrame")({
                    Name = "List",
                    Parent = optionsFrame,
                    BackgroundTransparency = 1,
                    BorderSizePixel = 0,
                    Size = UDim2.new(1, 0, 1, 0),
                    CanvasSize = UDim2.new(0, 0, 0, 0),
                    ScrollBarThickness = 3,
                    ScrollBarImageColor3 = ColorScheme.Accent1,
                    ZIndex = 5,
                    AutomaticCanvasSize = Enum.AutomaticSize.Y
                })
                
                local optionsLayout = Create("UIListLayout")({
                    Parent = optionsList,
                    SortOrder = Enum.SortOrder.LayoutOrder
                })
                
                local isOpen = false
                
                local function ToggleDropdown()
                    isOpen = not isOpen
                    
                    if isOpen then
                        optionsFrame.Visible = true
                        local totalHeight = 0
                        
                        for _, child in pairs(optionsList:GetChildren()) do
                            if child:IsA("TextButton") then
                                totalHeight = totalHeight + child.AbsoluteSize.Y
                            end
                        end
                        
                        totalHeight = math.min(totalHeight, 150)
                        
                        Tween(optionsFrame, {Size = UDim2.new(1, 0, 0, totalHeight)})
                        Tween(dropFrame, {Size = UDim2.new(1, 0, 0, 55 + totalHeight)})
                        Tween(dropIcon, {Rotation = 180})
                    else
                        Tween(optionsFrame, {Size = UDim2.new(1, 0, 0, 0)})
                        Tween(dropFrame, {Size = UDim2.new(1, 0, 0, 55)})
                        Tween(dropIcon, {Rotation = 0})
                        task.delay(0.3, function()
                            if not isOpen then
                                optionsFrame.Visible = false
                            end
                        end)
                    end
                end
                
                dropButton.MouseButton1Click:Connect(function()
                    ToggleDropdown()
                end)
                
                local function AddOption(option)
                    local optionButton = Create("TextButton")({
                        Name = option .. "Option",
                        Parent = optionsList,
                        BackgroundTransparency = 1,
                        Size = UDim2.new(1, 0, 0, 30),
                        Font = REGULAR_FONT,
                        Text = option,
                        TextColor3 = ColorScheme.Text,
                        TextSize = 14,
                        ZIndex = 6,
                        AutoButtonColor = false
                    })
                    
                    optionButton.MouseEnter:Connect(function()
                        Tween(optionButton, {BackgroundTransparency = 0.8, BackgroundColor3 = ColorScheme.Accent1})
                    end)
                    
                    optionButton.MouseLeave:Connect(function()
                        Tween(optionButton, {BackgroundTransparency = 1})
                    end)
                    
                    optionButton.MouseButton1Click:Connect(function()
                        selectedOption = option
                        dropButton.Text = option
                        ToggleDropdown()
                        
                        if typeof(callback) == "function" then
                            task.spawn(function()
                                callback(option)
                            end)
                        end
                    end)
                end
                
                if options then
                    for _, option in ipairs(options) do
                        AddOption(option)
                    end
                end
                
                local dropdownObj = {
                    Frame = dropFrame,
                    Selected = selectedOption,
                    SetOptions = function(self, newOptions)
                        for _, child in pairs(optionsList:GetChildren()) do
                            if child:IsA("TextButton") then
                                child:Destroy()
                            end
                        end
                        
                        for _, option in ipairs(newOptions) do
                            AddOption(option)
                        end
                    end,
                    Set = function(self, option)
                        if table.find(options, option) then
                            selectedOption = option
                            dropButton.Text = option
                            
                            if typeof(callback) == "function" then
                                task.spawn(function()
                                    callback(option)
                                end)
                            end
                        end
                    end,
                    AddOption = function(self, option)
                        if not table.find(options, option) then
                            table.insert(options, option)
                            AddOption(option)
                        end
                    end,
                    RemoveOption = function(self, option)
                        local index = table.find(options, option)
                        if index then
                            table.remove(options, index)
                            
                            for _, child in pairs(optionsList:GetChildren()) do
                                if child:IsA("TextButton") and child.Text == option then
                                    child:Destroy()
                                end
                            end
                            
                            if selectedOption == option then
                                selectedOption = options[1] or ""
                                dropButton.Text = selectedOption
                                
                                if typeof(callback) == "function" then
                                    task.spawn(function()
                                        callback(selectedOption)
                                    end)
                                end
                            end
                        end
                    end
                }
                
                return dropdownObj
            end
            
            -- Create a text input field
            function section:AddTextBox(boxText, defaultText, placeholder, callback)
                local textBoxFrame = Create("Frame")({
                    Name = boxText .. "TextBox",
                    Parent = sectionContainer,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 55)
                })
                
                local boxLabel = Create("TextLabel")({
                    Name = "Label",
                    Parent = textBoxFrame,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 20),
                    Font = REGULAR_FONT,
                    Text = boxText,
                    TextColor3 = ColorScheme.Text,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                local inputBox = Create("TextBox")({
                    Name = "Input",
                    Parent = textBoxFrame,
                    BackgroundColor3 = ColorScheme.Background,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 0, 25),
                    Size = UDim2.new(1, 0, 0, 30),
                    Font = REGULAR_FONT,
                    PlaceholderText = placeholder or "Enter text...",
                    Text = defaultText or "",
                    TextColor3 = ColorScheme.Text,
                    PlaceholderColor3 = Color3.fromRGB(120, 120, 130),
                    TextSize = 14,
                    ClearTextOnFocus = false
                })
                
                local boxCorner = Create("UICorner")({
                    CornerRadius = CORNER_RADIUS,
                    Parent = inputBox
                })
                
                inputBox.FocusLost:Connect(function(enterPressed)
                    if enterPressed and typeof(callback) == "function" then
                        task.spawn(function()
                            callback(inputBox.Text)
                        end)
                    end
                end)
                
                local textboxObj = {
                    Frame = textBoxFrame,
                    Text = inputBox.Text,
                    Set = function(self, text)
                        inputBox.Text = text
                        
                        if typeof(callback) == "function" then
                            task.spawn(function()
                                callback(text)
                            end)
                        end
                    end
                }
                
                return textboxObj
            end
            
            -- Create a label
            function section:AddLabel(labelText)
                local labelFrame = Create("Frame")({
                    Name = "Label",
                    Parent = sectionContainer,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 20)
                })
                
                local label = Create("TextLabel")({
                    Name = "Label",
                    Parent = labelFrame,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 1, 0),
                    Font = REGULAR_FONT,
                    Text = labelText,
                    TextColor3 = ColorScheme.Text,
                    TextSize = 14,
                    TextWrapped = true
                })
                
                local labelObj = {
                    Frame = labelFrame,
                    Set = function(self, text)
                        label.Text = text
                    end
                }
                
                return labelObj
            end
            
            -- Create a separator
            function section:AddSeparator()
                local separatorFrame = Create("Frame")({
                    Name = "Separator",
                    Parent = sectionContainer,
                    BackgroundColor3 = ColorScheme.Accent1,
                    BorderSizePixel = 0,
                    Size = UDim2.new(0.9, 0, 0, 1),
                    Transparency = 0.7
                })
                
                return separatorFrame
            end
            
            -- Create a color picker
            function section:AddColorPicker(pickerText, defaultColor, callback)
                local colorPickerFrame = Create("Frame")({
                    Name = pickerText .. "ColorPicker",
                    Parent = sectionContainer,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 50),
                    ClipsDescendants = true
                })
                
                local pickerLabel = Create("TextLabel")({
                    Name = "Label",
                    Parent = colorPickerFrame,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, -60, 0, 20),
                    Font = REGULAR_FONT,
                    Text = pickerText,
                    TextColor3 = ColorScheme.Text,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                local currentColor = defaultColor or Color3.fromRGB(255, 255, 255)
                
                local colorDisplay = Create("Frame")({
                    Name = "ColorDisplay",
                    Parent = colorPickerFrame,
                    BackgroundColor3 = currentColor,
                    BorderSizePixel = 0,
                    Position = UDim2.new(1, -50, 0, 0),
                    Size = UDim2.new(0, 50, 0, 20),
                    AnchorPoint = Vector2.new(0, 0)
                })
                
                local displayCorner = Create("UICorner")({
                    CornerRadius = CORNER_RADIUS,
                    Parent = colorDisplay
                })
                
                local colorPickerButton = Create("TextButton")({
                    Name = "Button",
                    Parent = colorPickerFrame,
                    BackgroundColor3 = ColorScheme.Background,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 0, 25),
                    Size = UDim2.new(1, 0, 0, 25),
                    Text = "Choose Color",
                    TextColor3 = ColorScheme.Text,
                    Font = REGULAR_FONT,
                    TextSize = 14,
                    AutoButtonColor = false
                })
                
                local buttonCorner = Create("UICorner")({
                    CornerRadius = CORNER_RADIUS,
                    Parent = colorPickerButton
                })
                
                local pickerGui = Create("Frame")({
                    Name = "PickerGui",
                    Parent = colorPickerFrame,
                    BackgroundColor3 = ColorScheme.Secondary,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 0, 0, 55),
                    Size = UDim2.new(1, 0, 0, 0),
                    Visible = false,
                    ZIndex = 10
                })
                
                local pickerCorner = Create("UICorner")({
                    CornerRadius = CORNER_RADIUS,
                    Parent = pickerGui
                })
                
                local colorSpectrum = Create("ImageButton")({
                    Name = "Spectrum",
                    Parent = pickerGui,
                    BackgroundTransparency = 1,
                    Position = UDim2.new(0, 10, 0, 10),
                    Size = UDim2.new(1, -20, 0, 100),
                    Image = "rbxassetid://6523286724", -- Color spectrum image
                    ZIndex = 11
                })
                
                local spectrumCorner = Create("UICorner")({
                    CornerRadius = CORNER_RADIUS,
                    Parent = colorSpectrum
                })
                
                local selector = Create("Frame")({
                    Name = "Selector",
                    Parent = colorSpectrum,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    BorderSizePixel = 0,
                    Size = UDim2.new(0, 4, 0, 4),
                    AnchorPoint = Vector2.new(0.5, 0.5),
                    ZIndex = 12
                })
                
                local selectorCorner = Create("UICorner")({
                    CornerRadius = UDim.new(1, 0),
                    Parent = selector
                })
                
                local brightnessSlider = Create("Frame")({
                    Name = "Brightness",
                    Parent = pickerGui,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 10, 0, 120),
                    Size = UDim2.new(1, -20, 0, 20),
                    ZIndex = 11
                })
                
                local brightnessCorner = Create("UICorner")({
                    CornerRadius = CORNER_RADIUS,
                    Parent = brightnessSlider
                })
                
                local brightnessGradient = Create("UIGradient")({
                    Parent = brightnessSlider,
                    Color = ColorSequence.new({
                        ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 0)),
                        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
                    }),
                    Transparency = NumberSequence.new(0)
                })
                
                local brightnessSelector = Create("Frame")({
                    Name = "BrightnessSelector",
                    Parent = brightnessSlider,
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255),
                    BorderSizePixel = 0,
                    Position = UDim2.new(1, 0, 0.5, 0),
                    Size = UDim2.new(0, 4, 1, 4),
                    AnchorPoint = Vector2.new(0.5, 0.5),
                    ZIndex = 12
                })
                
                local brightnessSelectorCorner = Create("UICorner")({
                    CornerRadius = UDim.new(1, 0),
                    Parent = brightnessSelector
                })
                
                local confirmButton = Create("TextButton")({
                    Name = "Confirm",
                    Parent = pickerGui,
                    BackgroundColor3 = ColorScheme.Accent1,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0, 10, 0, 150),
                    Size = UDim2.new(0.5, -15, 0, 30),
                    Font = REGULAR_FONT,
                    Text = "Confirm",
                    TextColor3 = ColorScheme.Text,
                    TextSize = 14,
                    ZIndex = 11,
                    AutoButtonColor = false
                })
                
                local confirmCorner = Create("UICorner")({
                    CornerRadius = CORNER_RADIUS,
                    Parent = confirmButton
                })
                
                local cancelButton = Create("TextButton")({
                    Name = "Cancel",
                    Parent = pickerGui,
                    BackgroundColor3 = ColorScheme.Error,
                    BorderSizePixel = 0,
                    Position = UDim2.new(0.5, 5, 0, 150),
                    Size = UDim2.new(0.5, -15, 0, 30),
                    Font = REGULAR_FONT,
                    Text = "Cancel",
                    TextColor3 = ColorScheme.Text,
                    TextSize = 14,
                    ZIndex = 11,
                    AutoButtonColor = false
                })
                
                local cancelCorner = Create("UICorner")({
                    CornerRadius = CORNER_RADIUS,
                    Parent = cancelButton
                })
                
                local isOpen = false
                local brightness = 1
                local selectedColor = defaultColor or Color3.fromRGB(255, 255, 255)
                
                local function UpdateColor()
                    colorDisplay.BackgroundColor3 = selectedColor
                    
                    if typeof(callback) == "function" then
                        task.spawn(function()
                            callback(selectedColor)
                        end)
                    end
                end
                
                local function TogglePicker()
                    isOpen = not isOpen
                    
                    if isOpen then
                        pickerGui.Visible = true
                        Tween(pickerGui, {Size = UDim2.new(1, 0, 0, 190)})
                        Tween(colorPickerFrame, {Size = UDim2.new(1, 0, 0, 245)})
                    else
                        Tween(pickerGui, {Size = UDim2.new(1, 0, 0, 0)})
                        Tween(colorPickerFrame, {Size = UDim2.new(1, 0, 0, 50)})
                        task.delay(0.3, function()
                            if not isOpen then
                                pickerGui.Visible = false
                            end
                        end)
                    end
                end
                
                colorPickerButton.MouseButton1Click:Connect(function()
                    TogglePicker()
                end)
                
                colorPickerButton.MouseEnter:Connect(function()
                    Tween(colorPickerButton, {BackgroundColor3 = Color3.fromRGB(35, 40, 60)})
                end)
                
                colorPickerButton.MouseLeave:Connect(function()
                    Tween(colorPickerButton, {BackgroundColor3 = ColorScheme.Background})
                end)
                
                -- Spectrum functionality
                local function UpdateSpectrumSelector(input)
                    local xPos = math.clamp((input.Position.X - colorSpectrum.AbsolutePosition.X) / colorSpectrum.AbsoluteSize.X, 0, 1)
                    local yPos = math.clamp((input.Position.Y - colorSpectrum.AbsolutePosition.Y) / colorSpectrum.AbsoluteSize.Y, 0, 1)
                    
                    selector.Position = UDim2.new(xPos, 0, yPos, 0)
                    
                    -- Calculate color from position (HSV to RGB conversion)
                    local h = xPos
                    local s = 1 - yPos
                    local v = brightness
                    
                    -- HSV to RGB conversion
                    local hi = math.floor(h * 6)
                    local f = h * 6 - hi
                    local p = v * (1 - s)
                    local q = v * (1 - f * s)
                    local t = v * (1 - (1 - f) * s)
                    
                    local r, g, b
                    
                    if hi == 0 or hi == 6 then
                        r, g, b = v, t, p
                    elseif hi == 1 then
                        r, g, b = q, v, p
                    elseif hi == 2 then
                        r, g, b = p, v, t
                    elseif hi == 3 then
                        r, g, b = p, q, v
                    elseif hi == 4 then
                        r, g, b = t, p, v
                    elseif hi == 5 then
                        r, g, b = v, p, q
                    end
                    
                    selectedColor = Color3.fromRGB(r * 255, g * 255, b * 255)
                    colorDisplay.BackgroundColor3 = selectedColor
                end
                
                colorSpectrum.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        UpdateSpectrumSelector(input)
                        
                        local dragging = true
                        
                        local function Update(input)
                            if dragging then
                                UpdateSpectrumSelector(input)
                            end
                        end
                        
                        local connection
                        connection = UserInputService.InputChanged:Connect(function(input)
                            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                Update(input)
                            end
                        end)
                        
                        local ended
                        ended = UserInputService.InputEnded:Connect(function(input)
                            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                dragging = false
                                connection:Disconnect()
                                ended:Disconnect()
                            end
                        end)
                    end
                end)
                
                -- Brightness slider
                local function UpdateBrightness(input)
                    local xPos = math.clamp((input.Position.X - brightnessSlider.AbsolutePosition.X) / brightnessSlider.AbsoluteSize.X, 0, 1)
                    brightnessSelector.Position = UDim2.new(xPos, 0, 0.5, 0)
                    brightness = xPos
                    
                    -- Update color with new brightness
                    local h, s, _ = Color3.toHSV(selectedColor)
                    selectedColor = Color3.fromHSV(h, s, brightness)
                    colorDisplay.BackgroundColor3 = selectedColor
                end
                
                brightnessSlider.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                        UpdateBrightness(input)
                        
                        local dragging = true
                        
                        local function Update(input)
                            if dragging then
                                UpdateBrightness(input)
                            end
                        end
                        
                        local connection
                        connection = UserInputService.InputChanged:Connect(function(input)
                            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                                Update(input)
                            end
                        end)
                        
                        local ended
                        ended = UserInputService.InputEnded:Connect(function(input)
                            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                                dragging = false
                                connection:Disconnect()
                                ended:Disconnect()
                            end
                        end)
                    end
                end)
                
                -- Confirm and cancel buttons
                confirmButton.MouseButton1Click:Connect(function()
                    UpdateColor()
                    TogglePicker()
                end)
                
                cancelButton.MouseButton1Click:Connect(function()
                    selectedColor = currentColor
                    colorDisplay.BackgroundColor3 = currentColor
                    TogglePicker()
                end)
                
                local colorPickerObj = {
                    Frame = colorPickerFrame,
                    Color = selectedColor,
                    Set = function(self, color)
                        selectedColor = color
                        currentColor = color
                        colorDisplay.BackgroundColor3 = color
                        
                        if typeof(callback) == "function" then
                            task.spawn(function()
                                callback(color)
                            end)
                        end
                    end
                }
                
                return colorPickerObj
            end
            
            -- Create a keybind
            function section:AddKeybind(bindText, defaultKey, callback)
                local keyBindFrame = Create("Frame")({
                    Name = bindText .. "KeyBind",
                    Parent = sectionContainer,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(1, 0, 0, 30)
                })
                
                local bindLabel = Create("TextLabel")({
                    Name = "Label",
                    Parent = keyBindFrame,
                    BackgroundTransparency = 1,
                    Size = UDim2.new(0.7, 0, 1, 0),
                    Font = REGULAR_FONT,
                    Text = bindText,
                    TextColor3 = ColorScheme.Text,
                    TextSize = 14,
                    TextXAlignment = Enum.TextXAlignment.Left
                })
                
                local defaultKeyCode = defaultKey or Enum.KeyCode.G
                local currentKey = defaultKeyCode
                
                local keyDisplay = Create("TextButton")({
                    Name = "KeyDisplay",
                    Parent = keyBindFrame,
                    BackgroundColor3 = ColorScheme.Background,
                    BorderSizePixel = 0,
                    Position = UDim2.new(1, -80, 0, 0),
                    Size = UDim2.new(0, 80, 1, 0),
                    Font = REGULAR_FONT,
                    Text = defaultKeyCode.Name,
                    TextColor3 = ColorScheme.Text,
                    TextSize = 14,
                    AutoButtonColor = false
                })
                
                local displayCorner = Create("UICorner")({
                    CornerRadius = CORNER_RADIUS,
                    Parent = keyDisplay
                })
                
                local listening = false
                
                keyDisplay.MouseButton1Click:Connect(function()
                    listening = true
                    keyDisplay.Text = "..."
                    Tween(keyDisplay, {BackgroundColor3 = ColorScheme.Accent1})
                end)
                
                UserInputService.InputBegan:Connect(function(input, processed)
                    if processed then return end
                    
                    if listening and input.UserInputType == Enum.UserInputType.Keyboard then
                        currentKey = input.KeyCode
                        keyDisplay.Text = currentKey.Name
                        listening = false
                        Tween(keyDisplay, {BackgroundColor3 = ColorScheme.Background})
                        
                        if typeof(callback) == "function" then
                            task.spawn(function()
                                callback(currentKey)
                            end)
                        end
                    elseif not listening and input.KeyCode == currentKey then
                        if typeof(callback) == "function" then
                            task.spawn(function()
                                callback(currentKey)
                            end)
                        end
                    end
                end)
                
                local keybindObj = {
                    Frame = keyBindFrame,
                    Key = currentKey,
                    Set = function(self, key)
                        currentKey = key
                        keyDisplay.Text = key.Name
                        
                        if typeof(callback) == "function" then
                            task.spawn(function()
                                callback(key)
                            end)
                        end
                    end
                }
                
                return keybindObj
            end
            
            return section
        end
        
        return tab
    end
    
    -- Notifications system
    function UIObject:CreateNotification(title, message, type, duration)
        type = type or "info"
        duration = duration or 3
        
        local notifColors = {
            info = ColorScheme.Accent2,
            success = ColorScheme.Success,
            error = ColorScheme.Error,
            warning = ColorScheme.Warning
        }
        
        local color = notifColors[type] or notifColors.info
        
        -- Create notification container if it doesn't exist
        if not CoreGui:FindFirstChild("SynthwaveNotifications") then
            local notifContainer = Create("ScreenGui")({
                Name = "SynthwaveNotifications",
                Parent = CoreGui,
                ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
                ResetOnSpawn = false
            })
            
            local notifHolder = Create("Frame")({
                Name = "NotificationHolder",
                Parent = notifContainer,
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -330, 0, 10),
                Size = UDim2.new(0, 300, 1, -20),
                ClipsDescendants = false
            })
            
            local holderLayout = Create("UIListLayout")({
                Parent = notifHolder,
                Padding = UDim.new(0, 10),
                HorizontalAlignment = Enum.HorizontalAlignment.Center,
                SortOrder = Enum.SortOrder.LayoutOrder,
                VerticalAlignment = Enum.VerticalAlignment.Top
            })
        end
        
        local notifHolder = CoreGui.SynthwaveNotifications.NotificationHolder
        
        -- Create notification
        local notif = Create("Frame")({
            Name = "Notification",
            Parent = notifHolder,
            BackgroundColor3 = ColorScheme.Secondary,
            Size = UDim2.new(1, 0, 0, 0), -- Start with 0 height
            Position = UDim2.new(0, 0, 0, 0),
            BackgroundTransparency = 0,
            ClipsDescendants = true
        })
        
        local notifCorner = Create("UICorner")({
            CornerRadius = CORNER_RADIUS,
            Parent = notif
        })
        
        local leftAccent = Create("Frame")({
            Name = "LeftAccent",
            Parent = notif,
            BackgroundColor3 = color,
            BorderSizePixel = 0,
            Size = UDim2.new(0, 5, 1, 0),
            Position = UDim2.new(0, 0, 0, 0)
        })
        
        local accentCorner = Create("UICorner")({
            CornerRadius = CORNER_RADIUS,
            Parent = leftAccent
        })
        
        local rightCover = Create("Frame")({
            Name = "RightCover",
            Parent = leftAccent,
            BackgroundColor3 = color,
            BorderSizePixel = 0,
            Size = UDim2.new(0.5, 0, 1, 0),
            Position = UDim2.new(0.5, 0, 0, 0)
        })
        
        local notifTitle = Create("TextLabel")({
            Name = "Title",
            Parent = notif,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, -40, 0, 25),
            Position = UDim2.new(0, 15, 0, 0),
            Font = FONT,
            Text = title,
            TextColor3 = ColorScheme.Text,
            TextSize = 16,
            TextXAlignment = Enum.TextXAlignment.Left
        })
        
        local messageLabel = Create("TextLabel")({
            Name = "Message",
            Parent = notif,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, -20, 0, 0),
            Position = UDim2.new(0, 15, 0, 25),
            Font = REGULAR_FONT,
            Text = message,
            TextColor3 = ColorScheme.Text,
            TextSize = 14,
            TextWrapped = true,
            TextXAlignment = Enum.TextXAlignment.Left,
            TextYAlignment = Enum.TextYAlignment.Top,
            AutomaticSize = Enum.AutomaticSize.Y
        })
        
        local closeBtn = Create("TextButton")({
            Name = "CloseButton",
            Parent = notif,
            BackgroundTransparency = 1,
            Size = UDim2.new(0, 25, 0, 25),
            Position = UDim2.new(1, -25, 0, 0),
            Font = FONT,
            Text = "×",
            TextColor3 = ColorScheme.Text,
            TextSize = 20
        })
        
        -- Calculate required height based on message length
        local textSize = TextService:GetTextSize(
            message,
            14,
            REGULAR_FONT,
            Vector2.new(notif.AbsoluteSize.X - 40, math.huge)
        )
        
        local requiredHeight = math.max(60, textSize.Y + 40)
        
        -- Animate notification
        Tween(notif, {Size = UDim2.new(1, 0, 0, requiredHeight)}, 0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
        
        -- Progress bar
        local progressBar = Create("Frame")({
            Name = "ProgressBar",
            Parent = notif,
            BackgroundColor3 = color,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 0, 2),
            Position = UDim2.new(0, 0, 1, -2),
            ZIndex = 10
        })
        
        -- Animate progress bar
        Tween(progressBar, {Size = UDim2.new(0, 0, 0, 2)}, duration)
        
        -- Close notification
        local function CloseNotification()
            Tween(notif, {Size = UDim2.new(1, 0, 0, 0)}, 0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.In)
            task.wait(0.3)
            notif:Destroy()
        end
        
        closeBtn.MouseButton1Click:Connect(CloseNotification)
        
        task.delay(duration, CloseNotification)
        
        return notif
    end
    
    -- Change theme
    function UIObject:SetTheme(theme)
        if theme == "Dark" then
            ColorScheme = {
                Background = Color3.fromRGB(16, 8, 32),
                Accent1 = Color3.fromRGB(155, 89, 182),
                Accent2 = Color3.fromRGB(52, 152, 219),
                Text = Color3.fromRGB(255, 255, 255),
                Secondary = Color3.fromRGB(26, 31, 44),
                Success = Color3.fromRGB(46, 204, 113),
                Error = Color3.fromRGB(231, 76, 60),
                Warning = Color3.fromRGB(241, 196, 15)
            }
        elseif theme == "Light" then
            ColorScheme = {
                Background = Color3.fromRGB(240, 240, 245),
                Accent1 = Color3.fromRGB(130, 80, 190),
                Accent2 = Color3.fromRGB(52, 152, 219),
                Text = Color3.fromRGB(30, 30, 30),
                Secondary = Color3.fromRGB(250, 250, 255),
                Success = Color3.fromRGB(46, 204, 113),
                Error = Color3.fromRGB(231, 76, 60),
                Warning = Color3.fromRGB(241, 196, 15)
            }
        elseif theme == "Midnight" then
            ColorScheme = {
                Background = Color3.fromRGB(10, 10, 18),
                Accent1 = Color3.fromRGB(90, 60, 170),
                Accent2 = Color3.fromRGB(70, 130, 180),
                Text = Color3.fromRGB(230, 230, 230),
                Secondary = Color3.fromRGB(20, 20, 30),
                Success = Color3.fromRGB(40, 180, 100),
                Error = Color3.fromRGB(200, 60, 50),
                Warning = Color3.fromRGB(220, 180, 40)
            }
        end
        
        -- Update UI with new theme
        mainFrame.BackgroundColor3 = ColorScheme.Background
        topBar.BackgroundColor3 = ColorScheme.Secondary
        bottomBarCover.BackgroundColor3 = ColorScheme.Secondary
        sidebar.BackgroundColor3 = ColorScheme.Secondary
        rightCover.BackgroundColor3 = ColorScheme.Secondary
        bottomBar.BackgroundColor3 = ColorScheme.Secondary
        mainStroke.Color = ColorScheme.Accent1
        
        for _, tab in pairs(UIObject.Tabs) do
            if UIObject.CurrentTab == tab.Name then
                tab.Button.BackgroundColor3 = ColorScheme.Accent1
            else
                tab.Button.BackgroundColor3 = ColorScheme.Background
            end
        end
        
        UIObject.Settings.Theme = theme
    end
    
    -- Set accent color
    function UIObject:SetAccentColor(color)
        ColorScheme.Accent1 = color
        mainStroke.Color = color
        
        for _, tab in pairs(UIObject.Tabs) do
            if UIObject.CurrentTab == tab.Name then
                tab.Button.BackgroundColor3 = color
            end
        end
        
        UIObject.Settings.AccentColor = color
    end
    
    return UIObject
end

-- Initialize library with defaults
SynthwaveUI.Init = function(title, theme)
    return SynthwaveUI:Create(title, nil)
end

return SynthwaveUI
